name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  IMAGE_NAME: nature-proxy

jobs:
  docker-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      packages: write
      contents: write

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          NEW_VERSION=$(jq -r .version package.json)
          CUR_VERSION=$(curl https://api.github.com/repos/${{ github.repository }}/tags | jq -r '.[0].name' | sed -e 's/^v//')
          if [[ "$NEW_VERSION" != "$CUR_VERSION" ]]; then
            # generate new release 
            curl \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d "{\"tag_name\":\"v$NEW_VERSION\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":true}" \
              --fail

            # publish tagged image
            echo IMAGE_ID=$IMAGE_ID
            echo VERSION=$NEW_VERSION
            docker tag $IMAGE_NAME $IMAGE_ID:$NEW_VERSION
            docker push $IMAGE_ID:$NEW_VERSION
          fi
          
          # Use Docker `latest` tag convention
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=latest
          docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
